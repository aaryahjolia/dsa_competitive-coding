#include<bits/stdc++.h>
using namespace std;
#define INF INT_MAX

const int n=5; //n -> no. of vertices

void showMatrix(int dist[][n]){
    cout<<"  ";
    for(int i=1;i<=n;i++){
        printf("  V%d",i);
    }
    cout<<endl;
    for(int i=0;i<n;i++){
        cout<<"V"<<i+1<<" ";
        for(int j=0;j<n;j++){
            if(dist[i][j]!=INF)
                printf("%3d ",dist[i][j]);
            else
                cout<<"INF"<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
}

void shortestPath(int path[][n],int q,int r){
    if(path[q][r]!=0){
        shortestPath(path,q,path[q][r]-1);
        cout<<path[q][r]<<"->";
        shortestPath(path,path[q][r]-1,r);
    }
    return;
}

void floydWarshall(int graph[][n]){
    int dist[n][n]; // for shortest distance
    int path[n][n]={0}; // for shortest path

    // initializing distance matrix
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            dist[i][j]=graph[i][j];
        }
    }

    for(int k=0;k<n;k++){
        // k acts as intermediate node
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i!=j && i!=k && j!=k){
                    //dist[i,i] will be always 0 & if,any row/column is k, then dist[i,j] will remain as it is 
                    if(dist[i][j]>dist[i][k]+dist[k][j] && dist[i][k]!=INF && dist[k][j]!=INF){
                        dist[i][j] = dist[i][k] + dist[k][j];
                        path[i][j]=k+1;
                    }
                }
            }
        }
    }
    showMatrix(dist);
    // showMatrix(path);

    // finding shortest path
    cout<<"Shortest Path"<<endl;
    for(int i=0;i<n;i++){
        cout<<"Shortest Path from Vertex "<<i+1<<endl;
        for(int j=0;j<n;j++){
            if(i!=j){
                cout<<"Path from V"<<i+1<<" to V"<<j+1<<" : ";
                cout<<i+1<<"->";
                shortestPath(path,i,j);
                cout<<j+1<<endl;
            }
        }
        cout<<endl;
    }
}

int main(){
    int graph[n][n]={{0,6,8,INF,-4},
                    {INF,0,INF,1,7},
                    {INF,4,0,INF,INF},
                    {2,INF,-5,0,INF},
                    {INF,INF,INF,3,0}};
    cout<<"\nInitial Distance Matrix"<<endl;
    showMatrix(graph);

    cout<<"After applying Floyd Warshall Algorithm to find all pair shortest path"<<endl;
    floydWarshall(graph);
    return 0;
}
// Time Complexity -> O(v3) v-> #no. of vertices
// Space Complexity -> O(v2)
